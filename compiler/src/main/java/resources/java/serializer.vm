/**
 * ${className}.java
 * 
 * This file is generated code by Tesla compiler. Please don't edit. 
 */
#if( ! $namespace.isEmpty() ) 
package $namespace;
#end

public class ${className} {
#foreach( $schema in $schemas )
    public static final com.expedia.tesla.SchemaVersion VERSION_${schema.Version.Name.toUpperCase().replaceAll('[-\.\+\-\*\(\)\[\]\{\}\s]', '_')} = new com.expedia.tesla.SchemaVersion(${schema.Version.SchemaHash}L, (short)${schema.Version.VersionNumber}, "${schema.Version.Name}", null);
#end
    
    /**
     * Create a new binary writer instance for a specified schema version. The created writer object will write object
     * follow it's definition in the schema.
     */
    public static ObjectWriter newBinaryWriter(com.expedia.tesla.SchemaVersion version, java.io.OutputStream os) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
#foreach( $schema in $schemas )
#set(   $serialzerName = "TeslaBinaryWriter_${schema.Version.Name.replaceAll('[-\.\+\-\*\(\)\[\]\{\}\s]', '_')}" )
        if (version.getSchemaHash() == ${serialzerName}.SCHEMA_HASH) {
            return new ${serialzerName}(os);
        }
#end
        throw new com.expedia.tesla.serialization.TeslaSerializationException("Unsupported schema version " + version.getSchemaHash());
    }
    
    /**
     * Create a new binary reader instance for a specified schema version. The created reader object will read object
     * follow it's definition in the schema.
     */
    public static ObjectReader newBinaryReader(com.expedia.tesla.SchemaVersion version, java.io.InputStream is) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
#foreach( $schema in $schemas )
#set(   $deserialzerName = "TeslaBinaryReader_${schema.Version.Name.replaceAll('[-\.\+\-\*\(\)\[\]\{\}\s]', '_')}" )
        if (version.getSchemaHash() == ${deserialzerName}.SCHEMA_HASH) {
            return new ${deserialzerName}(is);
        }
#end
        throw new com.expedia.tesla.serialization.TeslaDeserializationException("Unsupported schema version " + version.getSchemaHash());
    }
    
    /**
     * Create a new JSON writer instance for a specified schema version. The created writer object will write object
     * follow it's definition in the schema.
     */
    public static ObjectWriter newJsonWriter(com.expedia.tesla.SchemaVersion version, java.io.OutputStream os) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
#foreach( $schema in $schemas )
#set(   $serialzerName = "TeslaJsonWriter_${schema.Version.Name.replaceAll('[-\.\+\-\*\(\)\[\]\{\}\s]', '_')}" )
        if (version.getSchemaHash() == ${serialzerName}.SCHEMA_HASH) {
            return new ${serialzerName}(os);
        }
#end
        throw new com.expedia.tesla.serialization.TeslaSerializationException("Unsupported schema version " + version.getSchemaHash());
    }
    
    /**
     * Create a new JSON reader instance for a specified schema version. The created reader object will read object
     * follow it's definition in the schema.
     */
    public static ObjectReader newJsonReader(com.expedia.tesla.SchemaVersion version, java.io.InputStream is) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
#foreach( $schema in $schemas )
#set(   $deserialzerName = "TeslaJsonReader_${schema.Version.Name.replaceAll('[-\.\+\-\*\(\)\[\]\{\}\s]', '_')}" )
        if (version.getSchemaHash() == ${deserialzerName}.SCHEMA_HASH) {
            return new ${deserialzerName}(is);
        }
#end
        throw new com.expedia.tesla.serialization.TeslaDeserializationException("Unsupported schema version " + version.getSchemaHash());
    }
    
    /**
     * Create a new JSON change writer instance for a specified schema version. The created writer object will write object
     * follow it's definition in the schema.
     */
    public static ChangeWriter newJsonChangeWriter(com.expedia.tesla.SchemaVersion version, java.io.OutputStream os) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
#foreach( $schema in $schemas )
#set(   $serialzerName = "TeslaJsonChangeWriter_${schema.Version.Name.replaceAll('[-\.\+\-\*\(\)\[\]\{\}\s]', '_')}" )
        if (version.getSchemaHash() == ${serialzerName}.SCHEMA_HASH) {
            return new ${serialzerName}(os);
        }
#end
        throw new com.expedia.tesla.serialization.TeslaSerializationException("Unsupported schema version " + version.getSchemaHash());
    }
    
    /**
     * Create a new JSON change reader instance for a specified schema version. The created reader object will read object
     * follow it's definition in the schema.
     */
    public static ChangeReader newJsonChangeReader(com.expedia.tesla.SchemaVersion version, java.io.InputStream is) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
#foreach( $schema in $schemas )
#set(   $deserialzerName = "TeslaJsonChangeReader_${schema.Version.Name.replaceAll('[-\.\+\-\*\(\)\[\]\{\}\s]', '_')}" )
        if (version.getSchemaHash() == ${deserialzerName}.SCHEMA_HASH) {
            return new ${deserialzerName}(is);
        }
#end
        throw new com.expedia.tesla.serialization.TeslaDeserializationException("Unsupported schema version " + version.getSchemaHash());
    }
    
    /**
     * Write object instances of any user defined types in application schema files (TML). To create instance of ObjectWriter,
     * use newBinaryWriter or newJsonWriter method.   
     */
    public static abstract class ObjectWriter {
#set( $allUserTypes = $util.getAllUserTypes($schemas))
#foreach( $type in $allUserTypes )
#if(    $type.isClass() )
#set(   $td = $mapper.getTypeDescriptor($type))
        public void write(${type.Name} v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
            write${td.Symbol}(null, v);
        }
#end
#end
        // Following methods will be override by actual serialization class for each schema.
#foreach( $type in $allUserTypes )
#if(    $type.isClass() )
#set(   $td = $mapper.getTypeDescriptor($type))
        protected void write${td.Symbol}(String name, ${type.Name} v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
            throw new com.expedia.tesla.serialization.TeslaSerializationException("Type '${type.Name}' is not defined in current schema.");
        }
#end
#end
    }
    
    /**
     * Read object instances of any user defined types in application schema files (TML). To create instance of ObjectReader,
     * use newBinaryReader or newJsonReader method.   
     */
    public static abstract class ObjectReader {
#set( $allUserTypes = $util.getAllUserTypes($schemas))
#foreach( $type in $allUserTypes )
#if(    $type.isClass() )
#set(   $td = $mapper.getTypeDescriptor($type))
        public $td.InterfaceName read($td.InterfaceName v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
            return read${td.Symbol}(null, v);
        }
#end
#end
        // Following methods will be override by actual serialization class for each schema.
#foreach( $type in $allUserTypes )
#if(    $type.isClass() )
#set(   $td = $mapper.getTypeDescriptor($type))
        protected $td.InterfaceName read${td.Symbol}(String name, $td.InterfaceName v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
            throw new com.expedia.tesla.serialization.TeslaDeserializationException("Type '${type.Name}' is not defined in current schema.");
        }
#end
#end
    }
    
    /**
     * Compare two values and write only properties or values which are not equal for any user defined objects in 
     * application schema files (TML). To create instance of ChangeWriter, use newJsonChangeWriter.   
     */
    public static abstract class ChangeWriter {
#set( $allUserTypes = $util.getAllUserTypes($schemas))
#foreach( $type in $allUserTypes )
#if(    $type.isClass() )
#set(   $td = $mapper.getTypeDescriptor($type))
        public void write(${type.Name} oldValue, ${type.Name} newValue) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
            throw new com.expedia.tesla.serialization.TeslaSerializationException("Type '${type.Name}' is not defined in current schema.");
        }
#end
#end
    }

    /**
     * Read serialized changes generated by ChangeWriter, and applied them on an existing value. Only the changed values
     * or properties will be updated. All other properties or values will remain the current value.
     */
    public static abstract class ChangeReader {
#set( $allUserTypes = $util.getAllUserTypes($schemas))
#foreach( $type in $allUserTypes )
#if(    $type.isClass() )
#set(   $td = $mapper.getTypeDescriptor($type))
        public $td.InterfaceName read($td.InterfaceName v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
            throw new com.expedia.tesla.serialization.TeslaDeserializationException("Type '${type.Name}' is not defined in current schema.");
        }
#end
#end
    }
}

########################################################################################################################
## Binary serializers
########################################################################################################################

#foreach( $schema in $schemas )
#set(   $serialzerName = "TeslaBinaryWriter_${schema.Version.Name.replaceAll('[-\.\+\-\*\(\)\[\]\{\}\s]', '_')}" )
#set(   $deserialzerName = "TeslaBinaryReader_${schema.Version.Name.replaceAll('[-\.\+\-\*\(\)\[\]\{\}\s]', '_')}" )

class ${serialzerName} extends ${className}.ObjectWriter {
#parse( "resources/java/binary/writer.vm")
}

class ${deserialzerName} extends ${className}.ObjectReader {
#parse( "resources/java/binary/reader.vm")
}

#end

########################################################################################################################
## JSON serializers
########################################################################################################################
#foreach( $schema in $schemas )
#set(   $serialzerName = "TeslaJsonWriter_${schema.Version.Name.replaceAll('[-\.\+\-\*\(\)\[\]\{\}\s]', '_')}" )
#set(   $deserialzerName = "TeslaJsonReader_${schema.Version.Name.replaceAll('[-\.\+\-\*\(\)\[\]\{\}\s]', '_')}" )

class ${serialzerName} extends ${className}.ObjectWriter {
#parse( "resources/java/json/writer.vm")
}

class ${deserialzerName} extends ${className}.ObjectReader {
#parse( "resources/java/json/reader.vm")
}

#end

########################################################################################################################
## JSON change serializers
########################################################################################################################
#foreach( $schema in $schemas )
#set(   $serialzerName = "TeslaJsonChangeWriter_${schema.Version.Name.replaceAll('[-\.\+\-\*\(\)\[\]\{\}\s]', '_')}" )
#set(   $deserialzerName = "TeslaJsonChangeReader_${schema.Version.Name.replaceAll('[-\.\+\-\*\(\)\[\]\{\}\s]', '_')}" )

class ${serialzerName} extends ${className}.ChangeWriter {
#parse( "resources/java/json/change_writer.vm")
}

class ${deserialzerName} extends ${className}.ChangeReader {
#parse( "resources/java/json/change_reader.vm")
}

#end



