########################################################################################################################
##  Context variables required
##  1. schema
##  2. mapper 
##  3. deserialzerName
########################################################################################################################

## add boolean, int32 and uint32
#set( $bool_desc = $mapper.getTypeDescriptor($schema.addType("boolean")) )
#set( $int32_desc = $mapper.getTypeDescriptor( $schema.addType("int32") ) )
#set( $uint32_desc = $mapper.getTypeDescriptor( $schema.addType("uint32") ) )

    public static final long SCHEMA_HASH = ${schema.Version.SchemaHash}L;
    private com.expedia.tesla.serialization.BinaryReader reader;
    private com.expedia.tesla.serialization.ReferencePolicy refPolicy = new com.expedia.tesla.serialization.ReferencePolicy();
            
    ${deserialzerName}(java.io.InputStream stream) {
        reader = new com.expedia.tesla.serialization.BinaryReader(stream, SCHEMA_HASH);
    }

#foreach( $type in $schema.Types)
#set($td = $mapper.getTypeDescriptor($type))
#if( $type.isClass() )
    public $td.InterfaceName read${td.Symbol}(java.lang.String name) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        return read${td.Symbol}(name, null);
    }

    @Override
    public $td.InterfaceName read${td.Symbol}(java.lang.String name, $td.InterfaceName v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        if (v == null)
            v = new ${td.ActualTypeName}();
#foreach( $f in $type.AllFields )
#set( $ftd = $mapper.getTypeDescriptor($f.Type))
#if(${f.SetterName})
        v.${f.SetterName}(read${ftd.Symbol}("$f.DisplayName"));
#else
        v.set${f.DisplayName}(read${ftd.Symbol}("$f.DisplayName"));
#end
#end
        return v;
    }
    
#end
#end

#foreach( $type in $schema.Types)
#set($td = $mapper.getTypeDescriptor($type))
#if( $type.isNullable() )
#set($etd = $mapper.getTypeDescriptor($type.ElementType))
#if($type.ElementType.isPrimitive())
#end
    public $td.InterfaceName read${td.Symbol}(java.lang.String name) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        if (!read${bool_desc.Symbol}(name)) {
            return read${etd.Symbol}(name);
        } else {
            return null;
        }
    }
#end
#if( $type.isArray() )
#set($etd = $mapper.getTypeDescriptor($type.ElementType))
    public $td.InterfaceName read${td.Symbol}(java.lang.String name) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        int size = read${uint32_desc.Symbol}(name);
#if( $td.ActualTypeName.matches(".+\[\]$") )
        ${td.InterfaceName} v = new $td.ActualTypeName.replaceFirst("(.*?)(\[\])((\[\])*)$", "$1[size]$3");
        for (int i = 0; i < size; i++) {
            v[i] = read${etd.Symbol}(name);
        }
#else
        ${td.InterfaceName} v = new ${td.ActualTypeName}();
        for (int i = 0; i < size; i++) {
            v.add(read${etd.Symbol}(name));
        }
#end
        return v;
    }
#end
#if( $type.isMap() )
#set($ktd = $mapper.getTypeDescriptor($type.KeyType))
#set($vtd = $mapper.getTypeDescriptor($type.ValueType))
    public $td.InterfaceName read${td.Symbol}(java.lang.String name) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        int size = read${uint32_desc.Symbol}(name);
        $td.InterfaceName v = new $td.getActualTypeName()();
        for (int i = 0; i < size; i++) {
            v.put(read$ktd.getSymbol()(name), read$vtd.getSymbol()(name));
        }
        return v;
    }
#end
#if( $type.isEnum()  )
    public $td.InterfaceName read${td.Symbol}(java.lang.String name) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        int v = read${int32_desc.Symbol}(name);
#set( $enumName = $td.InterfaceName.replace('$', '.') )
        switch (v) {
#foreach( $entry in $type.Entries )
        case ${entry.Value}:
            return ${enumName}.${entry.Name};
#end
        default:
            throw new java.io.IOException(String.format(
                "Invalid Enum value '%d' encountered when reading field %s (type id '$type.TypeId')", 
                v, name));
        }
    }
#end
#if( $type.isPoly() )
    public $td.InterfaceName read${td.Symbol}(java.lang.String name) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        int t = read${int32_desc.Symbol}(name);
        switch (t) {
#set($tid = 0)
#foreach( $et in $type.ElementTypes )
        case $tid: 
            return read$mapper.getTypeDescriptor($et).getSymbol()(name);
#set($tid = $tid + 1)
#end
        default:
            throw new java.io.IOException(String.format(
                "Unexpected type %d for field %s (type id \"$type.TypeId\")", 
                $tid, name)); 
        }
    }
#end
#if( $type.isReference() )
#set($etd = $mapper.getTypeDescriptor($type.ElementType))
#set($clzzName = ${etd.ActualTypeName.replaceAll("<.+>", "")})
    public $td.InterfaceName read${td.Symbol}(java.lang.String name) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        int id = read${int32_desc.Symbol}(name);
        if (id >= 0) {
            return refPolicy.getInputReference(id, ${clzzName}.class);
        } else {
            ${etd.InterfaceName} v = read${etd.Symbol}(name);
            refPolicy.putInputReference(-id, v, ${clzzName}.class);
            return v;
        }
    }
#end
#if( $type.isPrimitive() )
    public $td.InterfaceName read${td.Symbol}(java.lang.String name) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
#if( $type.Name == "byte" )
        return reader.readByte(name);
#elseif( $type.Name == "int16" )
        return reader.readInt16(name);
#elseif( $type.Name == "int32" )
        return reader.readInt32(name);
#elseif( $type.Name == "int64" )
        return reader.readInt64(name);
#elseif( $type.Name == "uint16" )
        return reader.readUInt16(name);
#elseif( $type.Name == "uint32" )
        return reader.readUInt32(name);
#elseif( $type.Name == "uint64" )
        return reader.readUInt64(name);
#elseif( $type.Name == "boolean" )
        return reader.readBoolean(name);
#elseif( $type.Name == "float" )
        return reader.readFloat(name);
#elseif( $type.Name == "double" )
        return reader.readDouble(name);
#elseif( $type.Name == "string" )
        return reader.readString(name);
#elseif( $type.Name == "binary" )
        return reader.readBinary(name);
#else
        wrong!
#end  
    }
#end

#end