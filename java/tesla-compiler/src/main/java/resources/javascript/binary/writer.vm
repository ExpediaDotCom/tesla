########################################################################################################################
##  Context variable requiered
##  1. schema
##  2. mapper 
##  3. serialzerName
########################################################################################################################

## add boolean, int32 and uint32
#set( $bool_desc = $mapper.getTypeDescriptor($schema.addType("boolean")) )
#set( $int32_desc = $mapper.getTypeDescriptor( $schema.addType("int32") ) )
#set( $uint32_desc = $mapper.getTypeDescriptor( $schema.addType("uint32") ) )
(function(global) {
    function ${serialzerName}() {
        this.writer = new OutputStream();
    }
    
    ${serialzerName}.SCHEMA_HASH = ${schema.Version.SchemaHash};

#foreach( $type in $schema.Types)
#set($td = $mapper.getTypeDescriptor($type))
#if( $type.isClass() )
    write${td.Symbol}(name, v) {
#foreach( $f in $type.AllFields )
#set( $ftd = $mapper.getTypeDescriptor($f.Type))
        write${ftd.Symbol}("$f.DisplayName", v.${f.Name}());
#end
    }

#end
#end

#foreach( $type in $schema.Types)
#set($td = $mapper.getTypeDescriptor($type))
#if( $type.isNullable() )
#set($etd = $mapper.getTypeDescriptor($type.ElementType))
#if($type.ElementType.isPrimitive())
#end
    ${serialzerName}.prototype.write${td.Symbol}(name, v) {
        if (!v) {
            write${bool_desc.Symbol}(name, true);
        } else {
            write${bool_desc.Symbol}(name, false);
            write${etd.Symbol}(name, v);
        }
    }

#end
#if( $type.isArray() )
#set($etd = $mapper.getTypeDescriptor($type.ElementType))
    ${serialzerName}.prototype.write${td.Symbol}(name, v) {
        write${uint32_desc.Symbol}(name, v.size());
        for (var i = 0; i < v.length; i++) {
            write${etd.Symbol}(name, v[i]);
        }
    }
    
#end
#if( $type.isMap() )
#set($ktd = $mapper.getTypeDescriptor($type.KeyType))
#set($vtd = $mapper.getTypeDescriptor($type.ValueType))
    ${serialzerName}.prototype.write${td.Symbol}(name, v) {
        var size = 0, key;
        for (key in v) {
            if (v.hasOwnProperty(key)) size++;
        }
        write${uint32_desc.Symbol}(name, size);
        for (key in v) {
            if (v.hasOwnProperty(key)) {
                write$ktd.getSymbol()(name, key);
                write$vtd.getSymbol()(name, v[key]);
            }
        }
    }
    
#end
#if( $type.isEnum()  )
    ${serialzerName}.prototype.write${td.Symbol}(name, v) {
#set( $enumName = $td.InterfaceName.replace('$', '.') )
        switch (v) {
#foreach( $entry in $type.Entries )
        case ${type.Name}.${entry.Name}:
            write${int32_desc.Symbol}(name, ${entry.Value});
            break;
#end
        default:
            throw "Invalid enum value";
        }
    }
    
#end

#if( $type.isPrimitive() )
    ${serialzerName}.prototype.write${td.Symbol}(name, v) {
#if( $type.Name == "byte" )
        writer.writeByte(v);
#elseif( $type.Name == "int16" )
        writer.writeInt16(v);
#elseif( $type.Name == "int32" )
        writer.writeInt32(v);
#elseif( $type.Name == "int64" )
        writer.writeInt64(v);
#elseif( $type.Name == "uint16" )
        writer.writeUInt16(v);
#elseif( $type.Name == "uint32" )
        writer.writeUInt32(v);
#elseif( $type.Name == "uint64" )
        writer.writeUInt64(v);
#elseif( $type.Name == "boolean" )
        writer.writeBoolean(v);
#elseif( $type.Name == "float" )
        writer.writeFloat(v);
#elseif( $type.Name == "double" )
        writer.writeDouble(v);
#elseif( $type.Name == "string" )
        writer.writeString(v);
#elseif( $type.Name == "binary" )
        writer.writeBinary(v);
#else
        wrong!
#end       
    }
    
#end
    
#end

}(this));