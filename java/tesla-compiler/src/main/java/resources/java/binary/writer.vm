########################################################################################################################
##  Context variable requiered
##  1. schema
##  2. mapper 
##  3. serialzerName
########################################################################################################################

## add boolean, int32 and uint32
#set( $bool_desc = $mapper.getTypeDescriptor($schema.addType("boolean")) )
#set( $int32_desc = $mapper.getTypeDescriptor( $schema.addType("int32") ) )
#set( $uint32_desc = $mapper.getTypeDescriptor( $schema.addType("uint32") ) )

    public static final long SCHEMA_HASH = ${schema.Version.SchemaHash}L;
    private com.expedia.tesla.serialization.BinaryWriter writer;
    private com.expedia.tesla.serialization.ReferencePolicy refPolicy = new com.expedia.tesla.serialization.ReferencePolicy();
    
    public ${serialzerName}(OutputStream stream) {
        writer = new com.expedia.tesla.serialization.BinaryWriter(stream, SCHEMA_HASH);
    }

#foreach( $type in $schema.Types)
#set($td = $mapper.getTypeDescriptor($type))
#if( $type.isClass() )
    public void write${td.Symbol}(java.lang.String name, $td.InterfaceName v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
#foreach( $f in $type.AllFields )
#set( $ftd = $mapper.getTypeDescriptor($f.Type))
#if(${f.GetterName})
        write${ftd.Symbol}("$f.DisplayName", v.${f.GetterName}());
#else
        write${ftd.Symbol}("$f.DisplayName", v.get${f.DisplayName}());
#end
#end
    }

#end
#end

#foreach( $type in $schema.Types)
#set($td = $mapper.getTypeDescriptor($type))
#if( $type.isNullable() )
#set($etd = $mapper.getTypeDescriptor($type.ElementType))
#if($type.ElementType.isPrimitive())
#end
    public void write${td.Symbol}(java.lang.String name, $td.InterfaceName v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
        if (v == null) {
            write${bool_desc.Symbol}(name, true);
        } else {
            write${bool_desc.Symbol}(name, false);
            write${etd.Symbol}(name, v);
        }
    }

#end
#if( $type.isArray() )
#set($etd = $mapper.getTypeDescriptor($type.ElementType))
    public void write${td.Symbol}(java.lang.String name, $td.InterfaceName v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
#if( $td.getActualTypeName().matches(".*\[\]$") )
        write${uint32_desc.Symbol}(name, v.length);
#else
        write${uint32_desc.Symbol}(name, v.size());
#end
        for ($etd.InterfaceName e : v) {
            write${etd.Symbol}(name, e);
        }
    }
    
#end
#if( $type.isMap() )
#set($ktd = $mapper.getTypeDescriptor($type.KeyType))
#set($vtd = $mapper.getTypeDescriptor($type.ValueType))
    public void write${td.Symbol}(java.lang.String name, $td.InterfaceName v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
        write${uint32_desc.Symbol}(name, v.size());
        for (java.util.Map.Entry<$mapper.box(${ktd.InterfaceName}), $mapper.box(${vtd.InterfaceName})> entry : v.entrySet()) {
            write$ktd.getSymbol()(name, entry.getKey());
            write$vtd.getSymbol()(name, entry.getValue());
        }
    }
    
#end
#if( $type.isEnum()  )
    public void write${td.Symbol}(java.lang.String name, $td.InterfaceName v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
#set( $enumName = $td.InterfaceName.replace('$', '.') )
        switch (v) {
#foreach( $entry in $type.Entries )
        case ${entry.Name}:
            write${int32_desc.Symbol}(name, ${entry.Value});
            break;
#end
        default:
            throw new java.io.IOException(String.format(
                "Enum value %s is not allowed field %s (type id '$type.TypeId')", 
                v.toString(), name));
        }
    }
    
#end
#if( $type.isPoly() )
    public void write${td.Symbol}(java.lang.String name, $td.InterfaceName v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
#set($tid = 0)
#foreach( $et in $type.ElementTypes )
#set($etd = $mapper.getTypeDescriptor($et))
        #if($tid > 0)} else#end if (v.getClass().equals(${mapper.box($etd.InterfaceName)}.class)) {
            write${int32_desc.Symbol}(name, $tid);
            write${etd.Symbol}(name, ($mapper.box(${etd.InterfaceName}))v);
#set($tid = $tid + 1)
#end
        } else {
            throw new java.io.IOException(String.format(
                "Illegal type %s for field %s (type id '$type.TypeId')", 
                v.getClass().toString(), name));
        }
    }
    
#end
#if( $type.isReference() )
#set($etd = $mapper.getTypeDescriptor($type.ElementType))
#set($clzzName = ${etd.ActualTypeName.replaceAll("<.+>", "")})
    public void write${td.Symbol}(java.lang.String name, $td.InterfaceName v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
        int id = refPolicy.getOutputReferenceId(v, ${clzzName}.class);
        if (id > 0) {
            write_int32(null, id);
        } else {
            write_int32(null, -id);
            write${etd.Symbol}(name, ($mapper.box(${etd.InterfaceName}))v);
        }
    }

#end
#if( $type.isPrimitive() )
    public void write${td.Symbol}(java.lang.String name, $td.InterfaceName v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaSerializationException {
#if( $type.Name == "byte" )
        writer.writeByte(name, v);
#elseif( $type.Name == "int16" )
        writer.writeInt16(name, v);
#elseif( $type.Name == "int32" )
        writer.writeInt32(name, v);
#elseif( $type.Name == "int64" )
        writer.writeInt64(name, v);
#elseif( $type.Name == "uint16" )
        writer.writeUInt16(name, v);
#elseif( $type.Name == "uint32" )
        writer.writeUInt32(name, v);
#elseif( $type.Name == "uint64" )
        writer.writeUInt64(name, v);
#elseif( $type.Name == "boolean" )
        writer.writeBoolean(name, v);
#elseif( $type.Name == "float" )
        writer.writeFloat(name, v);
#elseif( $type.Name == "double" )
        writer.writeDouble(name, v);
#elseif( $type.Name == "string" )
        writer.writeString(name, v, false);
#elseif( $type.Name == "binary" )
        writer.writeBinary(name, v, false);
#else
        wrong!
#end       
    }
    
#end
    
#end