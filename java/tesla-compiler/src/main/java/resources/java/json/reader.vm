########################################################################################################################
##  Context variable requiered
##  1. schema
##  2. mapper 
##  3. deserialzerName
########################################################################################################################

## add boolean, int32 and uint32
#set( $bool_desc = $mapper.getTypeDescriptor($schema.addType("boolean")) )
#set( $int32_desc = $mapper.getTypeDescriptor( $schema.addType("int32") ) )
#set( $uint32_desc = $mapper.getTypeDescriptor( $schema.addType("uint32") ) )
#set( $string_desc = $mapper.getTypeDescriptor( $schema.addType("string") ) )

    public static final long SCHEMA_HASH = ${schema.Version.SchemaHash}L;
    private static final com.fasterxml.jackson.databind.ObjectMapper JSON_MAPPER = new com.fasterxml.jackson.databind.ObjectMapper();
    private com.fasterxml.jackson.databind.JsonNode root;
    private com.expedia.tesla.serialization.ReferencePolicy refPolicy = new com.expedia.tesla.serialization.ReferencePolicy();
    
    ${deserialzerName}(java.io.InputStream stream) throws java.io.IOException {
        root = JSON_MAPPER.readTree(stream);
    }

#foreach( $type in $schema.Types)
#set($td = $mapper.getTypeDescriptor($type))
#if( $type.isClass() )
    @Override
    protected $td.InterfaceName read${td.Symbol}(String name, $td.InterfaceName v) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        return read${td.Symbol}(name, v, root);
    }

    public $td.InterfaceName read${td.Symbol}(java.lang.String name, com.fasterxml.jackson.databind.JsonNode node) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        return read${td.Symbol}(name, null, node);
    }
    
    public $td.InterfaceName read${td.Symbol}(java.lang.String name, $td.InterfaceName v, com.fasterxml.jackson.databind.JsonNode node) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        if (!node.isObject())
            throw new AssertionError("BUG, not an object!");
        if (v == null) 
            v = new ${td.ActualTypeName}();
        com.fasterxml.jackson.databind.JsonNode vn;
#foreach( $f in $type.AllFields )
#set( $ftd = $mapper.getTypeDescriptor($f.Type))
        vn = node.get("$f.DisplayName");
        if(vn != null)
#if(${f.SetterName})
            v.${f.SetterName}(read${ftd.Symbol}("$f.DisplayName", vn));
#else
            v.set${f.DisplayName}(read${ftd.Symbol}("$f.DisplayName", vn));
#end
#end
        return v;
    }
    
#end
#end

#foreach( $type in $schema.Types)
#set($td = $mapper.getTypeDescriptor($type))
#if( $type.isNullable() )
#set($etd = $mapper.getTypeDescriptor($type.ElementType))
    public $td.InterfaceName read${td.Symbol}(java.lang.String name, com.fasterxml.jackson.databind.JsonNode node) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        if (node == null || node.isNull()) {
            return null;
        } else {
            return read${etd.Symbol}(name, node);
        }
    }
#end
#if( $type.isArray() )
#set($etd = $mapper.getTypeDescriptor($type.ElementType))
    public $td.InterfaceName read${td.Symbol}(java.lang.String name, com.fasterxml.jackson.databind.JsonNode node) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        if (!node.isArray())
            throw new AssertionError("BUG, not a json array value");
        java.util.Iterator<com.fasterxml.jackson.databind.JsonNode> itr = node.elements();
#if( $td.getActualTypeName().matches(".*\[\]$") )
        int size = 0;
        for (; itr.hasNext(); size++) itr.next();
        ${td.InterfaceName} v = new $td.ActualTypeName.replaceFirst("(.*?)(\[\])((\[\])*)$", "$1[size]$3");
        itr = node.elements();
        for (int i = 0; i < size; i++) {
            v[i] = read${etd.Symbol}(name, itr.next());
        }
#else
        ${td.InterfaceName} v = new ${td.ActualTypeName}();
        while (itr.hasNext()) {
            v.add(read${etd.Symbol}(name, itr.next()));
        }
#end
        return v;
    }
#end
#if( $type.isMap() )
#set($ktd = $mapper.getTypeDescriptor($type.KeyType))
#set($vtd = $mapper.getTypeDescriptor($type.ValueType))
    public $td.InterfaceName read${td.Symbol}(java.lang.String name, com.fasterxml.jackson.databind.JsonNode node) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        if (!node.isArray())
            throw new AssertionError("BUG, not a json array value");
        java.util.Iterator<com.fasterxml.jackson.databind.JsonNode> itr = node.elements();
        $td.InterfaceName v = new $td.getActualTypeName()();
        while (itr.hasNext()) {
            v.put(read$ktd.getSymbol()(name, itr.next()), read$vtd.getSymbol()(name, itr.next()));
        }
        return v;
    }
#end
#if( $type.isEnum()  )
    public $td.InterfaceName read${td.Symbol}(java.lang.String name, com.fasterxml.jackson.databind.JsonNode node) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        java.lang.String v = node.textValue();
#set( $enumName = $td.InterfaceName.replace('$', '.') )
#foreach( $entry in $type.Entries )
        if (v.equals("${entry.Name}")) {
            return ${enumName}.${entry.Name};
        }
#end
        throw new java.io.IOException(String.format(
            "Invalid Enum value '%s' encountered when reading field %s (type id '$type.TypeId')", 
            v, name));
    }
#end
#if( $type.isPoly() )
    public $td.InterfaceName read${td.Symbol}(java.lang.String name, com.fasterxml.jackson.databind.JsonNode node) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        if (node.isNumber())
            return node.numberValue();
        if (node.isBoolean())
            return node.booleanValue();
        if (node.isTextual())
            return node.textValue();
        if (node.isNull())
            return null;
        // TODO: fix me
        throw new java.io.IOException(String.format(
                "Unexpected type %d for field %s (type id \"$type.TypeId\")", 
                $tid, name)); 
    }
#end
#if( $type.isReference() )
#set($etd = $mapper.getTypeDescriptor($type.ElementType))
#set($clzzName = ${etd.ActualTypeName.replaceAll("<.+>", "")})
    public $td.InterfaceName read${td.Symbol}(java.lang.String name, com.fasterxml.jackson.databind.JsonNode node) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
        if (!node.isObject())
            throw new AssertionError("BUG, not a reference object!");

        if (node.has("@reference")) {
            int id = read${int32_desc.Symbol}(name, node.findValue("@reference"));
            return refPolicy.getInputReference(id, ${clzzName}.class);
        } else if (node.has("@id")) {
            int id = read${int32_desc.Symbol}(name, node.findValue("@id"));
            ${etd.InterfaceName} v = read${etd.Symbol}(name, node.findValue("@value"));
            refPolicy.putInputReference(id, v, ${clzzName}.class);
            return v;
        }
        throw new AssertionError("BUG, not a reference object!");
    }
#end
#if( $type.isPrimitive() )
    public $td.InterfaceName read${td.Symbol}(java.lang.String name, com.fasterxml.jackson.databind.JsonNode node) throws java.io.IOException, com.expedia.tesla.serialization.TeslaDeserializationException {
#if( $type.Name == "byte" )
        return (byte)node.intValue();
#elseif( $type.Name == "int16" )
        return (short)node.intValue();
#elseif( $type.Name == "int32" )
        return node.intValue();
#elseif( $type.Name == "int64" )
        return node.longValue();
#elseif( $type.Name == "uint16" )
        return (short)node.intValue();
#elseif( $type.Name == "uint32" )
        return (int)node.longValue();
#elseif( $type.Name == "uint64" )
        return node.longValue();
#elseif( $type.Name == "boolean" )
        return node.booleanValue();
#elseif( $type.Name == "float" )
        return (float)node.doubleValue();
#elseif( $type.Name == "double" )
        return node.doubleValue();
#elseif( $type.Name == "string" )
        return node.textValue();
#elseif( $type.Name == "binary" )
        return node.binaryValue();
#else
        wrong!
#end  
    }
#end

#end


